[tox]
envlist = py3{7,8,9,10}-linux
skip_missing_interpreters = true
skipsdist = true

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux

[base]
setenv =
    MDEF = /usr/include/mavlink/message_definitions
    NOGEN = True

deps =
    pip>=20.3
    future
    lxml
    versioningit

[build]
setenv =
    {[base]setenv}

deps =
    pip>=20.3
    wheel
    build
    twine

[testenv]
allowlist_externals = bash
passenv =
    PYTHON
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    CI
    XDG_*
    GITHUB*
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    {[base]setenv}
    PYTHONPATH = {toxinidir}/..
    #DISABLE_MAVNATIVE = True

deps =
    {[base]deps}
    pytest
    pytest-mock
    numpy
    #-e .[test,cov]

#commands_pre =
#    python -m pip install .

commands =
    # use --capture=no to see test runner output/results
    python -m pytest --capture=no tests/
    #pytest --cov pymavlink --cov-branch  --cov-report term-missing tests/
    #coverage xml
    #bash -c './.github/fix_pkg_name.sh'

[testenv:install]
skip_install = true
allowlist_externals =
    bash

setenv =
    MDEF = /usr/include/mavlink/message_definitions

deps =
    {[base]deps}
    wheel

commands_pre =
    bash -c 'ln -snf $MDEF '

commands =
    python setup.py install

[testenv:docs]
skip_install = true
allowlist_externals =
    make

deps =
    {[base]deps}
    -e .[doc]

commands = make -C docs html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    make

deps =
    {[base]deps}
    -e .[doc]

commands = make -C docs linkcheck

[testenv:lint]
setenv =
    PYTHONPATH = {toxinidir}/..

passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    pylint

commands =
    pylint --fail-under=5.75 .

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 .

[testenv:deploy]
skip_install = true
allowlist_externals = bash

setenv =
    {[build]setenv}

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[build]deps}

commands_pre =
    bash -c 'ln -snf $MDEF '

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
passenv = CI

deps =
    {[base]deps}

commands =
    pip install pymavlink --force-reinstall --pre --prefer-binary -f dist/

[testenv:mypy]
skip_install = true

setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/..

deps =
    {[base]deps}
    numpy
    mypy

commands_pre =
    python setup.py build_ext --inplace

commands =
    python -m mypy --follow-imports=normal --explicit-package-bases --namespace-packages \
        --install-types --non-interactive {toxinidir}
